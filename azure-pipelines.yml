variables:
  dockerId: gamalan  
  imageName: caddy-docker
  version: v2-experiment

jobs:
- job: Build_Binaries
  pool:
    vmImage: 'Ubuntu 18.04'

  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go1.17' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
    # TODO: modules should be the default in Go 1.13, so this won't be needed
    GO111MODULE: on

  steps:
  - bash: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'
  - bash: ./build.sh
    workingDirectory: '$(modulePath)'
    env:
      ARTIFACTS: '$(Build.ArtifactStagingDirectory)'
    displayName: Build

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: binaries
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/binaries'
    displayName: 'Publish Artifact'

- job: Build_Images_Linux
  dependsOn: Build_Binaries
  pool:
    vmImage: 'Ubuntu 18.04'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadPath: artifacts
      artifactName: binaries

  - script: |
      chmod +x artifacts/binaries/linux/amd64/caddy
      docker build -t $(dockerId)/$(imageName):$(version) -f Dockerfile .
      docker build -t $(dockerId)/$(imageName):$(version)-alpine -f Dockerfile-alpine .
    displayName: 'Build images'
  - script: |
      docker login -u $(dockerId) -p $(dockerPassword)
      docker push $(dockerId)/$(imageName):$(version)
      docker push $(dockerId)/$(imageName):$(version)-alpine
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Push images'

- job: Build_Images_Windows
  dependsOn: Build_Binaries
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadPath: artifacts
      artifactName: binaries

  - bash: |
      docker build -t $(dockerId)/$(imageName):$(version)-nanoserver -f Dockerfile-nanoserver .
    displayName: 'Build images'
  - bash: |
      docker login -u $(dockerId) -p $(dockerPassword)
      docker push $(dockerId)/$(imageName):$(version)-nanoserver
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Push images'